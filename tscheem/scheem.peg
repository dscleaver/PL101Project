start =
    comment? whitespace* e:expression whitespace*
      { return e; }

comment =
  ";;" [^\n]*

whitespace = 
  [ \t]
  / "\n" comment?

_ = whitespace*

validchar
    = [0-9a-zA-Z_?!+-=@#$%^&*/.]

atom =
    chars:validchar+
        { var value = chars.join("");
          var numVal = parseFloat(value);
          if(isNaN(numVal)) {
            numVal = parseInt(value);
            if(isNaN(numVal)) return value;
          } 
          return numVal; }

spaceexpression = 
  whitespace+ expr:expression
      {return expr; }

typename = 
    first:[a-z] chars:[a-zA-Z]*
      { return first + chars.join(""); }

typevalue = 
  t:("Num" / "Bool" / "Sym")
    { return { tag: 'basetype', name: t.toLowerCase() }; }
/ abs:typename
    { return { tag: 'abstype', name: abs }; }
/ "[" type:type "]"
    { return { tag: 'listtype', type: type }; }
/ "(" _ type:type _ ")"
    { return type; }

type = 
  left:typevalue _ "->" _ right:type
    { return { tag: 'arrowtype', left: left, right: right }; }
/ typevalue
 
typeexpr = 
  "{" _ expr:expression _ type:type _ "}"
    { return { tag: 'typeexpr',
               expr: expr,
               type: type }; }

expression =
  typeexpr
  / atom
  / "'" expr:expression
    { return [ "quote", expr ]; }
  / "(" ")"
    { return []; }
  / "(" whitespace* first:expression rest:spaceexpression* whitespace* ")"
    { return [ first ].concat(rest); }
